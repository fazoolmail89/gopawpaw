package com.jet.apps.databrowser.ui.editor;

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Point;

import java.sql.SQLException;

import javax.swing.*;

import com.jet.database.*;

import com.jet.apps.databrowser.model.DBSession;
import com.jet.apps.databrowser.database.DatabaseUtil;

import com.jet.apps.databrowser.ui.editor.actions.*;

/**
 * A DataEditor View component used to insert data. 
 *
 * @author Paul Bemowski
 */
public class InsertDataEditor extends DataEditor
{ 
   /** This indicates the primary key mode. */
   int pkMode=UNKNOWN;
   
   /** */
   public InsertDataEditor(JFrame p, SQLTable t, DBSession sess) {
      super(p, t, null, sess);
   }

   /** */
   public InsertDataEditor(JComponent p, SQLTable t, DBSession sess) {
      super(p, t, null, sess);
   }

   /** */
   protected JToolBar getNorthToolbar() {
      return new NorthToolbar();
   }

   /** */
   protected JToolBar getSouthToolbar() {
      return new SouthToolbar();
   }

   /** */
   public int getMode() {return INSERT;}

   /** */
   public void setPKMode(int i) {pkMode=i;}

   /** */
   class SouthToolbar extends JToolBar 
   {
      public SouthToolbar() {
         setFloatable(false);
         setLayout(new FlowLayout(FlowLayout.RIGHT));

         add(new JButton(new SaveCloseAction(InsertDataEditor.this)));
         add(new JButton(new SaveContinueAction(InsertDataEditor.this)));
         add(new JSeparator());
         add(new JButton(new CloseAction(InsertDataEditor.this)));
      }
   }

   /** */
   class NorthToolbar extends JToolBar
   {
      public NorthToolbar() {
         setFloatable(false);
         JLabel pk=new JLabel("PK Mode: ");
         pk.setForeground(Color.black);
         
         add(pk);
         
         ButtonGroup pkgroup=new ButtonGroup();
         
         JRadioButton rbutton=null;

         rbutton=new JRadioButton(new PKAction("Manual", InsertDataEditor.this,
                                               PK_MANUAL));
         rbutton.setSelected(true);
         InsertDataEditor.this.pkMode=PK_MANUAL;

         pkgroup.add(rbutton);
         add(rbutton);

         rbutton=new JRadioButton(new PKAction("None", InsertDataEditor.this,
                                               PK_NONE));
         pkgroup.add(rbutton);
         add(rbutton);

         rbutton=new JRadioButton(new PKAction("MAX()+1", InsertDataEditor.this,
                                               PK_MAXPLUS1));
         pkgroup.add(rbutton);
         add(rbutton);

         rbutton=new JRadioButton(new PKAction("GUID", InsertDataEditor.this,
                                               PK_GUID));
         pkgroup.add(rbutton);
         add(rbutton);
      }
   }

   /** */
   protected void init() {
      setTitle("Inserting into "+sqlTable.getName());
   }

   /** */
   public String getSQL()
      throws SQLException {
      StringBuffer sql=new StringBuffer();
      SchemaUtil su=session.getConnectionInfo().getSchemaUtil();
      
      // SQLTable table=editor.getTable();

      DatabaseUtil dbUtil=session.getDatabaseUtil();
      

      sql.append("insert into "+su.tableSQL(sqlTable.getName())+" (");

      int size=columnEditors.size();
      for (int i=0; i<size; i++) {
         ColumnEditor ce=(ColumnEditor)columnEditors.get(i);
         
         if (ce.isPrimaryKey() &&
             pkMode == PK_NONE) {
            // don't insert primary keys. assume the database has them
            // defaulted/autogenerated.
         }
         else {
            SQLColumn col=ce.getColumn();
            sql.append(col.getName());
            if (i <= size-2)
               sql.append(",");
            else
               sql.append(")");
         }
      }
      sql.append("\nvalues\n(");
      for (int i=0; i<size; i++) {
         ColumnEditor ce=(ColumnEditor)columnEditors.get(i);

         if (ce.isPrimaryKey() &&
             pkMode == PK_NONE) {
            // don't insert
         }
         else {
            sql.append(dbUtil.colToSQL(ce.getColumn(), ce.getValue()));
            if (i <= size-2)
               sql.append(",");
            else 
               sql.append(")");
         }
      }

      log.writeDebug(3, "SQL: \n"+sql);

      return sql.toString();
   }

   /** */
   public void clearAndContinue() {
      log.writeDebug(3, "InsertDataEditor.clearAndContinue()"); 
      
      DatabaseUtil dbUtil=session.getDatabaseUtil();
      
      for (int i=0; i<columnEditors.size(); i++) {
         ColumnEditor ce=(ColumnEditor)columnEditors.get(i);
         ce.clear();
                  
         if (pkMode == PK_MAXPLUS1 && ce.isPrimaryKey()) {
            try {
               long id=dbUtil.getMaxPlusOne(sqlTable.getName(), 
                                            ce.getColumn().getName());
               
               ce.getField().setText(""+id);
            }
            catch (Exception ex) {
               log.writeError(1, "Error getting max+1 on "+
                              ce.getColumn().getName(), ex);
            }
         }
      }
      colEdScroller.getViewport().setViewPosition(new Point(0, 0));
   }
}